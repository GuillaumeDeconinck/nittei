// User
{
    id: uuid,
    account_id: uuid
}

// Account
{
    id: uuid,
    pub secret_api_key: String,
    pub public_jwt_key: Option<PEMKey>,
    pub settings: AccountSettingsMongo,
    pub attributes: Vec<AccountAttributeMongo>,
}

// Calendar 
{
    id: uuid,
    user_id: uuid,
    account_id: uuid,
    settings: CalendarSettingsMongo,
}

// CalendarEventMongo 
{
    id: uuid,
    start_ts: i64,
    duration: i64,
    end_ts: i64,
    created: i64,
    updated: i64,
    busy: bool,
    user_id: uuid,
    exdates: Vec<i64>,
    calendar_id: uuid,
    account_id: uuid,
    recurrence: Option<RRuleOptions>,
    reminder: Option<CalendarEventReminder>,
    is_service: bool,
    metadata: Vec<KVMetadata>,
}

// EventRemindersExpansionJobMongo 
{
    id: uuid,
    event_id: uuid,
    timestamp: i64,
}

// ReminderMongo 
{
    id: uuid,
    remind_at: i64,
    event_id: uuid,
    account_id: uuid,
    priority: i64,
}

// ScheduleMongo 
{
    _id: uuid,
    user_id: uuid,
    account_id: uuid,
    rules: Vec<ScheduleRule>,
    timezone: String,
    metadata: Vec<KVMetadata>,
}

// ServiceMongo 
{
    id: uuid,
    account_id: uuid,
    metadata: Vec<KVMetadata>,
}

// ServiceUsers 
{
    service_id: uuid,
    user_id: uuid,
    buffer: i64,
    closest_booking_time: i64,
    furthest_booking_time: Option<i64>,
}

// ServiceResourceCalendar
{
    id: uuid,
    service_resource_id: uuid,
    calendar_id: uuid # foreign key
    busy: bool
}

// ServiceResourceSchedule
{
    id: uuid,
    service_resource_id: uuid,
    schedule_id: uuid # foreign key
}

// Metadata
{
    # Composite primary key
    pk: entity + entity_id,
    key: string,
    value: string,
}